/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/n1RDszhHd6Q
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Crimson_Text } from 'next/font/google'
import { Yeseva_One } from 'next/font/google'

crimson_text({
  subsets: ['latin'],
  display: 'swap',
})

yeseva_one({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"
import Image from "next/image";
import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Separator } from "@/components/ui/separator"
import { Card } from "@/components/ui/card"
import { Label } from "@/components/ui/label"

export function BookMarket() {
  const [cart, setCart] = useState([])
  const [customer, setCustomer] = useState({
    name: "",
    email: "",
    address: "",
    city: "",
    state: "",
    zip: "",
  })
  const books = [
    {
      id: 1,
      title: "The Great Gatsby",
      author: "F. Scott Fitzgerald",
      price: 12.99,
      image: "/images/img-01.png?height=619&width=872",
    },
    {
      id: 2,
      title: "1984",
      author: "George Orwell",
      price: 9.99,
      image: "/images/img-02.png?height=872&width=619",
    },
    {
      id: 3,
      title: "To Kill a Mockingbird",
      author: "Harper Lee",
      price: 14.99,
      image: "/images/img-03.png?height=872&width=619",
    },
    {
      id: 4,
      title: "Pride and Prejudice",
      author: "Jane Austen",
      price: 11.99,
      image: "/images/img-04.png?height=872&width=619",
    },
    {
      id: 5,
      title: "The Catcher in the Rye",
      author: "J.D. Salinger",
      price: 8.99,
      image: "/images/img-05.png?height=872&width=619",
    },
  ]
  const [transactions, setTransactions] = useState([
    {
      id: 1,
      date: "2023-06-01",
      customer: "John Doe",
      amount: 50.99,
      status: "Paid",
    },
    {
      id: 2,
      date: "2023-06-05",
      customer: "Jane Smith",
      amount: 75.25,
      status: "Paid",
    },
    {
      id: 3,
      date: "2023-06-10",
      customer: "Bob Johnson",
      amount: 30.5,
      status: "Pending",
    },
    {
      id: 4,
      date: "2023-06-15",
      customer: "Sarah Lee",
      amount: 90.75,
      status: "Paid",
    },
    {
      id: 5,
      date: "2023-06-20",
      customer: "Tom Wilson",
      amount: 45.99,
      status: "Paid",
    },
  ])
  const addToCart = (book, quantity) => {
    setCart([...cart, { ...book, quantity }])
  }
  const removeFromCart = (index) => {
    const updatedCart = [...cart]
    updatedCart.splice(index, 1)
    setCart(updatedCart)
  }
  const updateQuantity = (index, quantity) => {
    const updatedCart = [...cart]
    updatedCart[index].quantity = quantity
    setCart(updatedCart)
  }
  const handleCustomerChange = (field, value) => {
    setCustomer({ ...customer, [field]: value })
  }
  const total = cart.reduce((acc, item) => acc + item.price * item.quantity, 0)
  return (
    (<div className="container mx-auto py-12">
      <h1 className="text-3xl font-bold mb-8 text-center">Book Catalog</h1>
      <div
        className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-8">
        {books.map((book) => (
          <div
            key={book.id}
            className="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow duration-300">
            <Image
              src={book.image}
              alt={book.title}
              width={619}
              height={872}
              />
            <div className="p-4">
              <h3 className="text-lg font-bold mb-2">{book.title}</h3>
              <p className="text-gray-500 mb-4">{book.author}</p>
              <div className="flex items-center justify-between">
                <p className="text-primary font-bold">${book.price}</p>
                <div className="flex items-center gap-2">
                  <Button
                    size="sm"
                    variant="outline"
                    onClick={() => addToCart(book, 1)}
                    className="hover:bg-primary hover:text-primary-foreground transition-colors duration-300">
                    Add to Cart
                  </Button>
                  <Input
                    type="number"
                    min="1"
                    defaultValue="1"
                    className="w-16 border-gray-300 rounded-md focus:ring-primary focus:border-primary"
                    onChange={(e) => addToCart({ ...book, quantity: parseInt(e.target.value) }, 1)} />
                </div>
              </div>
            </div>
          </div>
        ))}
      </div>
      <div className="mt-8">
        <h2 className="text-2xl font-bold mb-4 text-center">Cart</h2>
        {cart.length === 0 ? (
          <p className="text-center">Your cart is empty.</p>
        ) : (
          <div className="bg-white rounded-lg shadow-md p-4">
            <table className="w-full">
              <thead>
                <tr>
                  <th className="text-left">Book</th>
                  <th className="text-left">Quantity</th>
                  <th className="text-right">Price</th>
                  <th />
                </tr>
              </thead>
              <tbody>
                {cart.map((item, index) => (
                  <tr key={index} className="hover:bg-gray-100 transition-colors duration-300">
                    <td>
                      <div className="flex items-center">
                        <Image
                          src={item.image}
                          alt={item.title}
                          width={100}
                          height={140}
                          className="mr-4"
                          style={{ aspectRatio: "100/140", objectFit: "cover" }} />
                        <div>
                          <h4 className="font-bold">{item.title}</h4>
                          <p className="text-gray-500">{item.author}</p>
                        </div>
                      </div>
                    </td>
                    <td>
                      <div className="flex items-center gap-2">
                        <Button
                          size="icon"
                          variant="outline"
                          onClick={() => updateQuantity(index, item.quantity - 1)}
                          className="hover:bg-primary hover:text-primary-foreground transition-colors duration-300"
                          disabled={item.quantity <= 1}>
                          <MinusIcon className="w-4 h-4" />
                        </Button>
                        <Input
                          type="number"
                          min="1"
                          value={item.quantity}
                          onChange={(e) => updateQuantity(index, parseInt(e.target.value))}
                          className="w-20 border-gray-300 rounded-md focus:ring-primary focus:border-primary" />
                        <Button
                          size="icon"
                          variant="outline"
                          onClick={() => updateQuantity(index, item.quantity + 1)}
                          className="hover:bg-primary hover:text-primary-foreground transition-colors duration-300">
                          <PlusIcon className="w-4 h-4" />
                        </Button>
                      </div>
                    </td>
                    <td className="text-right">${(item.price * item.quantity).toFixed(2)}</td>
                    <td className="text-right">
                      <Button
                        size="icon"
                        variant="outline"
                        onClick={() => removeFromCart(index)}
                        className="hover:bg-primary hover:text-primary-foreground transition-colors duration-300">
                        <TrashIcon className="w-4 h-4" />
                      </Button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
            <Separator className="my-4" />
            <div className="flex items-center justify-between">
              <p className="text-lg font-bold">Total:</p>
              <p className="text-2xl font-bold text-primary">${total.toFixed(2)}</p>
            </div>
          </div>
        )}
      </div>
      <div className="mt-8">
        <h2 className="text-2xl font-bold mb-4 text-center">Checkout</h2>
        <Card className="bg-white rounded-lg shadow-md p-6">
          <div className="grid grid-cols-2 gap-4">
            <div className="grid gap-2">
              <Label htmlFor="name">Name</Label>
              <Input
                id="name"
                value={customer.name}
                onChange={(e) => handleCustomerChange("name", e.target.value)}
                className="border-gray-300 rounded-md focus:ring-primary focus:border-primary" />
            </div>
            <div className="grid gap-2">
              <Label htmlFor="email">Email</Label>
              <Input
                id="email"
                type="email"
                value={customer.email}
                onChange={(e) => handleCustomerChange("email", e.target.value)}
                className="border-gray-300 rounded-md focus:ring-primary focus:border-primary" />
            </div>
            <div className="grid gap-2">
              <Label htmlFor="address">Address</Label>
              <Input
                id="address"
                value={customer.address}
                onChange={(e) => handleCustomerChange("address", e.target.value)}
                className="border-gray-300 rounded-md focus:ring-primary focus:border-primary" />
            </div>
            <div className="grid gap-2">
              <Label htmlFor="city">City</Label>
              <Input
                id="city"
                value={customer.city}
                onChange={(e) => handleCustomerChange("city", e.target.value)}
                className="border-gray-300 rounded-md focus:ring-primary focus:border-primary" />
            </div>
            <div className="grid gap-2">
              <Label htmlFor="state">State</Label>
              <Input
                id="state"
                value={customer.state}
                onChange={(e) => handleCustomerChange("state", e.target.value)}
                className="border-gray-300 rounded-md focus:ring-primary focus:border-primary" />
            </div>
            <div className="grid gap-2">
              <Label htmlFor="zip">Zip</Label>
              <Input
                id="zip"
                value={customer.zip}
                onChange={(e) => handleCustomerChange("zip", e.target.value)}
                className="border-gray-300 rounded-md focus:ring-primary focus:border-primary" />
            </div>
          </div>
          <Separator className="my-4" />
          <div className="flex justify-end">
            <Button
              className="bg-primary text-primary-foreground hover:bg-primary/90 transition-colors duration-300">
              Place Order
            </Button>
          </div>
        </Card>
      </div>
    </div>)
  );
}

function MinusIcon(props) {
  return (
    (<svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round">
      <path d="M5 12h14" />
    </svg>)
  );
}


function PlusIcon(props) {
  return (
    (<svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round">
      <path d="M5 12h14" />
      <path d="M12 5v14" />
    </svg>)
  );
}


function TrashIcon(props) {
  return (
    (<svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round">
      <path d="M3 6h18" />
      <path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6" />
      <path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2" />
    </svg>)
  );
}
